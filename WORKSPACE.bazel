workspace(name = "rust_firmware_bazel")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Rules Rust
http_archive(
    name = "rules_rust",
    sha256 = "36ab8f9facae745c9c9c1b33d225623d976e78f2cc3f729b7973d8c20934ab95",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.31.0/rules_rust-v0.31.0.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(
    edition = "2021",
    versions = ["1.75.0"],
    extra_target_triples = [
        "thumbv7em-none-eabihf",
        "riscv32imac-unknown-none-elf",
    ],
)

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

load("@rules_rust//crate_universe:defs.bzl", "crates_repository")

# Firmware dependencies
crates_repository(
    name = "firmware_deps",
    cargo_lockfile = "//firmware:Cargo.lock",
    manifests = ["//firmware:Cargo.toml"],
)

load("@firmware_deps//:defs.bzl", firmware_deps = "crate_repositories")
firmware_deps()

# Skylib
http_archive(
    name = "bazel_skylib",
    sha256 = "66ffd9315665bfaafc96b52278f57c7e2dd09f5ede279ea6d39b2be471e7e3aa",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.4.2/bazel-skylib-1.4.2.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.4.2/bazel-skylib-1.4.2.tar.gz",
    ],
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
bazel_skylib_workspace()

# Platforms
http_archive(
    name = "platforms",
    sha256 = "8150406605389ececb6da07cbcb509d5637a3ab9a24bc69b1101531367d89d74",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.8/platforms-0.0.8.tar.gz",
        "https://github.com/bazelbuild/platforms/releases/download/0.0.8/platforms-0.0.8.tar.gz",
    ],
)

# RTL Tools Configuration
# Register RTL toolchain
register_toolchains("//tools/rtl:rtl_toolchain")

# RTL tool dependencies
new_local_repository(
    name = "rtl_tools",
    path = "/usr/local/rtl_tools",  # Adjust to your RTL tools location
    build_file_content = """
package(default_visibility = ["//visibility:public"])

# Verilog compiler (using Icarus Verilog as example)
filegroup(
    name = "iverilog",
    srcs = ["bin/iverilog"],
)

# Synthesis tool (using Yosys as example)
filegroup(
    name = "yosys",
    srcs = ["bin/yosys"],
)

# Template generator
py_binary(
    name = "jinja_gen",
    srcs = ["bin/jinja_gen.py"],
    deps = ["@pip_deps//jinja2"],
)
"""
)

# Python dependencies for RTL generation
load("@rules_python//python:repositories.bzl", "python_register_toolchains", "rules_python_dependencies")

rules_python_dependencies()

python_register_toolchains(
    name = "python3_11",
    python_version = "3.11",
)

load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "pip_deps",
    requirements_lock = "//tools/rtl:requirements.txt",
)